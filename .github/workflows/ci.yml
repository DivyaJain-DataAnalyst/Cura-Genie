name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: curagenie_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run linting and code quality checks
      run: |
        cd backend
        black --check --diff .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        isort --check-only --diff .
        bandit -r . --exclude ./tests/
        
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/curagenie_test
        ENVIRONMENT: testing
        SECRET_KEY: test_secret_key_12345
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
        
    - name: Build frontend application
      run: |
        cd frontend
        npm run build
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run dependency vulnerability scan
      run: |
        cd backend && pip-audit --format json --output backend-audit.json || true
        cd frontend && npm audit --audit-level=high --json > frontend-audit.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          backend/backend-audit.json
          frontend/frontend-audit.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install performance testing dependencies
      run: |
        cd backend
        pip install locust pytest-benchmark
        
    - name: Run performance benchmarks
      run: |
        cd backend
        pytest tests/unit/test_performance.py --benchmark-only
        
    - name: Run load tests
      run: |
        cd backend
        locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 30s --html performance-report.html
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          backend/performance-report.html
          backend/.pytest_cache/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be deploying to Railway, Vercel, or other platforms
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests to verify deployment
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Successfully deployed to staging"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Failed to deploy to staging"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health checks to verify production deployment
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Successfully deployed to production"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Failed to deploy to production"

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        
    - name: Check code coverage thresholds
      run: |
        echo "Checking code coverage thresholds..."
        # Add coverage threshold checks
        
    - name: Check security scan results
      run: |
        echo "Checking security scan results..."
        # Add security threshold checks
        
    - name: Check performance benchmarks
      run: |
        echo "Checking performance benchmarks..."
        # Add performance threshold checks
        
    - name: Quality gates passed
      if: success()
      run: |
        echo "üéâ All quality gates passed!"
        
    - name: Quality gates failed
      if: failure()
      run: |
        echo "‚ùå Quality gates failed!"
        exit 1
